{"version":3,"sources":["components/navbar.component.js","components/recipeCards.component.js","components/results.component.js","components/ingList.component.js","components/ingAdd.component.js","components/ingListExc.component.js","components/ingAddExc.component.js","components/search.component.js","components/footer.component.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","Component","RecipeCard","props","state","key","this","recipe","id","title","src","img","alt","searchedString","missedString","maybeString","href","sourceUrl","rel","target","require","config","Results","noResults","ingredientResults","resultsLoaded","createCards","bind","ids","titles","imgs","ingListPaired","nextReqList","responses","newRecipe","usedIng","missedIng","maybe","reset","API_KEY","process","queryDiet","diet","queryString","ingListQuery","ingListExcQuery","axios","get","catch","err","console","log","setState","firstReq","data","totalResults","assessIng","i","num","extendedIngredients","forEach","item","x","length","item1","name","item2","push","includes","join","results","image","createVars","Promise","all","then","values","mappedCards","map","type","onClick","toggleView","IngList","createList","ing","deleteIng","mappedIngs","ingList","next","IngAdd","onSubmit","addIng","placeholder","value","newIng","onChange","newIngHandleInput","IngListExc","ingListExc","ingListString","onClickSearch","IngAddExc","PickDiet","onClickDietNull","Search","chooseDietScreen","onClickDiet","ingScreen","ingExcScreen","goBack","Footer","App","filteredList","filter","isLoaded","resultsVisible","ingListOrig","resultsLoading","ingString","resultsLoadingHandler","e","preventDefault","Date","now","toLowerCase","endsWith","replace","concat","halflen","y","queryList","queryExcList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2507904b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class Navbar extends Component{\r\n//constructor\r\n\r\n//functions\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"topnav\">What Can I Make?</div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class RecipeCard extends Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n\r\n    }\r\n\r\n    // // TODO:\r\n    //CREATE MAP FUNCTION TO CREATE EACH card\r\n\r\n    //IMPORT RECIPES FROM RESULTS.Component, USE IN MAPPING\r\n    //IN RECIPES Component, LOG LIST OF RECIPES, PULL IN TO THIS\r\n  }\r\n\r\nrender(props){\r\n  return(\r\n    <div className=\"main-container\" key={this.props.recipe.id}>\r\n      <div className=\"card-container\">\r\n        <div className=\"card-front\">\r\n          <h2>{this.props.recipe.title}</h2>\r\n          <img src={this.props.recipe.img} alt={this.props.recipe.title} />\r\n        </div>\r\n        <div className=\"card-back\">\r\n          <h3 className=\"results-searched\">This recipe uses</h3>\r\n          <p className=\"results-searched\">{this.props.recipe.searchedString}</p>\r\n          <h3 className=\"results-missed\">You'll still need</h3>\r\n          <p className=\"results-missed\">{this.props.recipe.missedString}</p>\r\n          {this.props.recipe.maybeString !== \"\" ? <div className=\"results-maybe\">\r\n          <h3>You might have</h3>\r\n          <p>{this.props.recipe.maybeString}</p></div> : null}\r\n\r\n          <a href={this.props.recipe.sourceUrl} rel=\"noopener noreferrer\" target=\"_blank\">See recipe</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}}\r\n","import React, { Component } from 'react';\r\nimport RecipeCards from \"./recipeCards.component\";\r\nimport axios from 'axios';\r\nrequire(\"dotenv\").config(); //so we can have env vars in the dotenv file\r\n\r\nexport default class Results extends Component{\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      // complexResults: [], //data from the complex results search goes here\r\n      // newRecipeIng: {missedIng: [], usedIng: [], maybe: []},\r\n      // newRecipe: {id: \"\", data: []}, //each individual recipe by data and ID\r\n      // idSearchResults: [],\r\n      noResults: false,\r\n      ingredientResults: [], //ing by ID\r\n      resultsLoaded: false, //becomes true when page is ready to display results\r\n    }\r\n\r\n  this.createCards = this.createCards.bind(this);\r\n  }\r\n\r\n\r\n\r\n\r\n//  TODO:\r\n//  create cards\r\n//  fix ing stuff = search functionality not wokring, .match function\r\n//  add testingstring.js here, make it a function that you can iterate through\r\n//  Navbar\r\n//  footer\r\n//  css beasie\r\n\r\n// if serached item -ies, serch for same item -y. vice versa. -s, ennds without s. vice versa\r\n// for each item in searched item, add the plural/not plural to the list\r\n\r\n\r\n\r\n  async componentDidMount() {\r\n    var ids = []; //stores ids from initial search (firstReq)\r\n    var titles = []; //stores titles from initial search\r\n    var imgs = []; //stores imgs from initial search\r\n    var num;\r\n    var ingListPaired = this.props.ingListPaired //easier to work with\r\n    var nextReqList = []; //will fill with axios query strings to search for each recipe ID, to be used in Promise.all(nextReqList)\r\n    var responses = []; //will fill with responses from Promise.all(nextReqList)\r\n    var newRecipe = {id: \"\", title: \"\", usedIng: [], img:\"\", missedIng: [], maybe: [], searchedString: \"\", sourceUrl: \"\", missedString: \"\"}; //each individual recipe by data and ID\r\n    // fill this in as we use assessIng, gets reset after each recipe is looked through\r\n    var reset = () => { newRecipe = {id: \"\", title: \"\", usedIng: [], img:\"\", missedIng: [], maybe: [], searchedString: \"\", sourceUrl: \"\", missedString: \"\"}};\r\n    // used to reset newRecipe after each recipe is looked through\r\n    var ingredientResults = []; //store ingredient results for all recipes here, pushed to this.state.ingredientResults at the end of componentDidMount\r\n\r\n    const API_KEY = process.env.REACT_APP_SPOONACULAR_API_KEY;\r\n    const queryDiet = (this.props.diet === \"\" ? \"\" : `&diet=${this.props.diet}`)  //if dietspecified, add to query string\r\n    const queryString = //`https://api.spoonacular.com/recipes\r\n    `https://api.spoonacular.com/recipes/complexSearch?number=10&apiKey=${API_KEY}&includeIngredients=${this.props.ingListQuery}&excludeIngredients=${this.props.ingListExcQuery}&diet=${queryDiet}`\r\n\r\n    //run our first request, grab ids of recipes we will use in second request\r\n\r\n      const firstReq = await axios\r\n        .get(queryString,)\r\n        .catch(err => {\r\n          console.log(\"ERROR : \" + err)\r\n          this.setState({noResults: true, resultsLoaded: true})\r\n        });\r\n\r\n\r\n    //if no results are returned, ask user to try again.\r\n    if (firstReq.data.totalResults === 0){\r\n      this.setState({noResults: true, resultsLoaded: true})\r\n    } else { //if results are returned, run everything below.\r\n\r\n    //for each recipe, grab id, title, img\r\n    firstReq.data.results.forEach((item) => {\r\n    \tids.push(item.id)\r\n    \ttitles.push(item.title);\r\n      imgs.push(item.image)\r\n      })\r\n\r\n    //use the number of results to determine how many times to iterate through createVars, assessIng\r\n    if (firstReq.data.totalResults < 11) {\r\n      num = firstReq.data.totalResults\r\n    } else { num = 10 }\r\n\r\n    //creates a new axios call for each ID grabbed from the initial search (firstReq)\r\n    const createVars = () => {\r\n      for (let i = 0; i < num; i++) {\r\n        nextReqList[i] = axios(`https://api.spoonacular.com/recipes/${ids[i]}/information?apiKey=${API_KEY}`)\r\n          .catch(err => {\r\n              this.setState({noResults: true, resultsLoaded: true})\r\n            });\r\n      }\r\n    }\r\n\r\n\r\n  //for each recipe, sort ingredients, create newRecipe, set state, reset newRecipe\r\n    function assessIng(){\r\n      //for each recipe from the inital search (firstReq)\r\n      for (var i = 0; i<num; i++) {\r\n        // for each ingredient in the current recipe\r\n        responses[i].data.extendedIngredients.forEach((item) => {\r\n          //for each pair of ingredients (plural and not) that the user searched for\r\n          for (var x=0; x < ingListPaired.length; x++) {\r\n            if(ingListPaired[x].item1 === item.name || ingListPaired[x].item2 === item.name ) { //if exact match\r\n              newRecipe.usedIng.push(item.name) //push to usedIng list\r\n              break; //move on to next ing user searched for\r\n            } else if(item.name.includes(ingListPaired[x].item1) || item.name.includes(ingListPaired[x].item2)) { //if the individual word is in the ingredient name\r\n              newRecipe.maybe.push(item.name) //add to maybe list\r\n              break; //move on to next ing user searched for\r\n            } else if(x === ingListPaired.length-1){ //if you get to the end of the list and there is no match at all\r\n              newRecipe.missedIng.push(item.name) //else add to mmissed list\r\n              }\r\n            }\r\n          })\r\n          //after going through an entire recipe, add everything to newRecipe\r\n          newRecipe.searchedString = newRecipe.usedIng.join(', ')\r\n          newRecipe.missedString = newRecipe.missedIng.join(', ')\r\n          newRecipe.maybeString = newRecipe.maybe.join(\", \")\r\n          newRecipe.id = ids[i]\r\n          newRecipe.title = titles[i]\r\n          newRecipe.img = imgs[i]\r\n          newRecipe.sourceUrl = responses[i].data.sourceUrl\r\n          ingredientResults.push(newRecipe); // push whole recipe to ingredientResults\r\n          reset(); // then reset newRecipe\r\n      }\r\n    }\r\n\r\n    //RUN THE FUNCTIONS\r\n    await createVars(num) //create axios calls for each ID from initial request\r\n    await Promise.all(nextReqList).then(function(values) { //axios call for each recipe\r\n      responses = values\r\n    })\r\n    await assessIng() //sort through each ingredient in each recipe\r\n\r\n    this.setState({ingredientResults: ingredientResults, resultsLoaded: true})\r\n    // this.setState({resultsLoaded:true})\r\n  }};\r\n\r\n\r\n\r\n\r\n\r\n\r\n      createCards(recipe) {\r\n        return(\r\n          <RecipeCards key = {recipe.id} recipe = {recipe} />\r\n        )\r\n      }\r\n\r\n\r\n\r\n\r\n  render(props) {\r\n    const ingRes = this.state.ingredientResults\r\n    {/*create a list we can use*/}\r\n    const mappedCards = ingRes.map(recipe => this.createCards(recipe))\r\n    {/*run each item through function above*/}\r\n    return(\r\n      <div>\r\n      {!this.state.resultsLoaded ?\r\n        <div>\r\n          <h2>loading your recipes........</h2>\r\n        </div>\r\n       :\r\n       <div>\r\n       {this.state.noResults ?\r\n         <h2>You search returned no results. Please try again with different ingredients.</h2>\r\n         :\r\n        <div className=\"container-flex\">\r\n          {mappedCards}\r\n        </div>\r\n      }\r\n      </div>\r\n    }\r\n            <button type=\"button\" className=\"btn\" onClick={this.props.toggleView}>Start over</button>\r\n      </div>\r\n    )\r\n\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class IngList extends Component{\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.createList.bind(this);\r\n  }\r\n\r\n//this formats all the ingredients passed as props\r\n  createList(ing) {\r\n    return(\r\n      <li className=\"container-ing-flex\" key={ing.key}>\r\n        <p>{ing.name}</p>\r\n        <button className=\"btn\" type=\"button\" onClick={() => this.props.deleteIng(ing.key)}>delete</button>\r\n      </li>\r\n    )\r\n  }\r\n\r\n  render(props) {\r\n    const ingList = this.props.ingList\r\n    {/*create a list we can use*/}\r\n    const mappedIngs = ingList.map(ing => this.createList(ing))\r\n    {/*run each item through function above*/}\r\n    return(\r\n    //return below\r\n      <div>\r\n        <form>\r\n          <label>You are searching for recipes with:</label>\r\n          {/*onClick goes to final screen*/}\r\n            <ul className=\"mappedIngs container-flex\">{mappedIngs}</ul>\r\n          <button className=\"btn\" onClick={this.props.next}>Next</button>\r\n        </form>\r\n      </div>\r\n\r\n\r\n    )\r\n  }\r\n\r\n\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class IngAdd extends Component{\r\n\r\n  render() {\r\n    return(\r\n\r\n        <form onSubmit={this.props.addIng}>\r\n          <label>Add an ingredient to the list:</label>\r\n            <input\r\n              className=\"ing-form\"\r\n              type=\"text\"\r\n              placeholder=\"add ingredient\"\r\n              value={this.props.newIng.name}\r\n              onChange={this.props.newIngHandleInput} />\r\n            <button type=\"submit\" className=\"btn\">Add</button>\r\n        </form>\r\n\r\n\r\n    )\r\n  }\r\n\r\n\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class IngListExc extends Component{\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.createList.bind(this);\r\n  }\r\n\r\n//this formats all the ingredients passed as props\r\n  createList(ing) {\r\n    return(\r\n      <li className=\"container-ing-flex\" key={ing.key}>\r\n        <p>{ing.name}</p>\r\n        <button className=\"btn\" type=\"button\" onClick={() => this.props.deleteIng(ing.key)}>delete</button>\r\n      </li>\r\n    )\r\n  }\r\n\r\n  render(props) {\r\n    const ingListExc = this.props.ingListExc\r\n    {/*create a list we can use*/}\r\n    const mappedIngs = ingListExc.map(ing => this.createList(ing))\r\n    {/*run each item through function above*/}\r\n    return(\r\n    //return below\r\n      <div>\r\n        <form>\r\n          {/*onClick goes to final screen*/}\r\n            <ul className=\"mappedIngs container-flex\">{mappedIngs}</ul>\r\n            <h5>Searcing for recipes with:</h5>\r\n            <h6>{this.props.ingListString}</h6>\r\n          <button className=\"btn\" onClick={this.props.onClickSearch}>Search</button>\r\n        </form>\r\n      </div>\r\n\r\n\r\n    )\r\n  }\r\n\r\n\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class IngAddExc extends Component{\r\n\r\n  render() {\r\n    return(\r\n\r\n        <form onSubmit={this.props.addIng}>\r\n          <label>I <strong>do not</strong> want these ingredients in my recipe search:</label>\r\n            <input className=\"ing-form\"\r\n              type=\"text\"\r\n              placeholder=\"add ingredient\"\r\n              value={this.props.newIng.name}\r\n              onChange={this.props.newIngHandleInput} />\r\n            <button type=\"submit\" className=\"btn\">Add</button>\r\n        </form>\r\n\r\n\r\n    )\r\n  }\r\n\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport IngList from \"./ingList.component\";\r\nimport IngAdd from \"./ingAdd.component\";\r\nimport IngListExc from \"./ingListExc.component\";\r\nimport IngAddExc from \"./ingAddExc.component\";\r\n\r\n//this screen comes up first. users can choose one diet, then auto goes to ing screen\r\nconst PickDiet = props => (\r\n  <div>\r\n  <h2>Wonder what you can make with the ingredients you have on hand?</h2>\r\n  <h2>Let's find out.</h2>\r\n  <form className=\"form-group diet\">\r\n    <label>Start by selecting a diet:</label>\r\n    <div className=\"container-flex\">\r\n      <input type=\"button\" id=\"omnivore\" value=\"Omnivore\" onClick={props.onClickDietNull} className=\"btn\" />\r\n      <input type=\"button\" id=\"glutenfree\" value=\"Gluten Free\" onClick={props.onClick} className=\"btn\" />\r\n      <input type=\"button\" id=\"vegetarian\" value=\"Vegetarian\" onClick={props.onClick} className=\"btn\" />\r\n      <input type=\"button\" id=\"vegan\" value=\"Vegan\" onClick={props.onClick} className=\"btn\" />\r\n      <input type=\"button\" id=\"pescatarian\" value=\"Pescatarian\" onClick={props.onClick} className=\"btn\" />\r\n      <input type=\"button\" id=\"paleo\" value=\"Paleo\" onClick={props.onClick} className=\"btn\" />\r\n    </div>\r\n  </form>\r\n  </div>\r\n)\r\n\r\n\r\n//comes last. can choose if they want to inc all ing or just some of the ones listed\r\n// const IncWhichIngredients = props => (\r\n//\r\n//   <div>\r\n//     <h3>Make sure my results include</h3>\r\n//     <button onClick={props.onClickAll}>all</button>\r\n//     <button onClick={props.onClickSome}>some</button>\r\n//     <h3>of the ingredients listed</h3>\r\n//     <p>{props.ingListString}</p>\r\n//   </div>\r\n// )\r\n\r\n//comes after diet screen. inc back and next buttons. like a to do list component.\r\nexport default class Search extends Component{\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n      {/*each screen is only based on chooseDietScreen, ingScreen, finalScreen,\r\n        functions change state*/}\r\n        {/*if first screen, PickDiet displayed*/}\r\n        {this.props.chooseDietScreen && <PickDiet\r\n          onClick={this.props.onClickDiet}\r\n          onClickDietNull={this.props.onClickDietNull} />}\r\n        {/*if diet chosen, ingScreen(add form and list) displayed*/}\r\n        {this.props.ingScreen &&\r\n          <div>\r\n            <IngAdd addIng={this.props.addIng}\r\n            newIngHandleInput={this.props.newIngHandleInput}\r\n            newIng={this.props.newIng}\r\n            />\r\n            <IngList ingList={this.props.ingList}\r\n            deleteIng = {this.props.deleteIng}\r\n            next={this.props.next} />\r\n          </div>}\r\n        {this.props.ingExcScreen &&\r\n          <div>\r\n            <IngAddExc addIng={this.props.addIng}\r\n            newIngHandleInput={this.props.newIngHandleInput}\r\n            newIng={this.props.newIng}\r\n            />\r\n            <IngListExc ingListExc={this.props.ingListExc}\r\n            deleteIng = {this.props.deleteIng}\r\n            onClickSearch = {this.props.onClickSearch}\r\n            ingListString = {this.props.ingListString} />\r\n          </div>}\r\n        {/*button is only showed if chooseDietScreen is false*/}\r\n        {!this.props.chooseDietScreen && <button className=\"btn\" onClick={this.props.goBack}>Go Back</button>}\r\n      </div>\r\n\r\n\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Footer extends Component{\r\n//constructor\r\n\r\n//functions\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"footer\">Copyright <a target=\"_blank\" rel=\" noopener noreferrer\" href=\"http://nikkster.tech\">nikkster.tech</a></div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from \"./components/navbar.component\";\nimport Results from \"./components/results.component\";\nimport Search from \"./components/search.component\";\nimport Footer from \"./components/footer.component\";\nrequire(\"dotenv\").config(); //so we can have env vars in the dotenv file\n\nexport default class App extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      // items: [],\n      isLoaded: false,\n      resultsVisible: false, //are we showing the results page?\n      //----------------------------------\n      newIng: {key: \"\", name: \"\"}, //updates as user types new ingredient\n      ingList: [], //updates when user presses \"add\", adds ingredient to list\n      ingListExc: [],\n      ingListString: \"\", //creates clean str for display when user clicks \"next\" on ing add page\n      ingListPaired: [],\n      ingListQuery: \"\", //creates a list to use for the query, on results page\n      ingListExcQuery: \"\",\n      diet: \"\", //veg, vegan, GF, etc..\n      chooseDietScreen: true,\n      ingScreen: false,\n      ingExcScreen: false,\n      ingListOrig: [],\n      resultsLoading: true\n    }\n\n    this.toggleView = this.toggleView.bind(this); //toggles btwn search and results components\n    this.onClickDiet = this.onClickDiet.bind(this); //selects diet for this.state.diet\n    this.addIng = this.addIng.bind(this); //add ingredient to ingredient list\n    this.deleteIng = this.deleteIng.bind(this); //deletes ingredient that was added to ing list\n    this.newIngHandleInput = this.newIngHandleInput.bind(this); //handles as user types new ing\n    this.ingString = this.ingString.bind(this); //turns ing list to a str\n    this.ingListQuery = this.ingListQuery.bind(this); //turns ing list to a str for query search\n    this.goBack = this.goBack.bind(this);\n    this.next = this.next.bind(this);\n    this.onClickDietNull = this.onClickDietNull.bind(this);\n    this.resultsLoadingHandler = this.resultsLoadingHandler.bind(this);\n  }\n\ntoggleView() {\n  this.state.resultsVisible ? //if we are on the results page (true)\n    this.setState({ //go back to search page, reset all states\n      resultsVisible: false,\n      resultsLoading: true,\n      ingList: [],\n      ingListExc: [],\n      ingListString: \"\",\n      ingListQuery: \"\",\n      ingListExcQuery: \"\",\n      ingListOrig: [],\n      ingListPaired: [],\n      diet: \"\",\n      chooseDietScreen: true,\n      ingScreen: false,\n      ingExcScreen: false\n  }) : //if we are on the search page\n    this.setState({resultsVisible: true}) //go to the results page, set loadingg to true\n}\n\n\n//======================================================\n// INGREDIENT functions\n//======================================================\n\nx = []\n//adds new ing to list, resets newIng state\n//works for adding and excluding ingredients\naddIng(e){\n  e.preventDefault();\n  const newIng = this.state.newIng\n  if (newIng.name !== '') { //if there is an input..\n    //adds to state depending on which page is showing (add, exclude)\n    const ingList = this.state.ingScreen ? [...this.state.ingList, newIng] : [...this.state.ingListExc, newIng] //add to list..\n    //adds to state depending on which page is showing (add, exclude)\n    this.state.ingScreen ?\n    this.setState({ //set add list state and restart\n      ingList: ingList,\n      newIng: {name: \"\", key: \"\"}})\n    :\n    this.setState({ //set exclude list state and restart\n      ingListExc: ingList,\n      newIng: {name: \"\", key: \"\"}\n    })\n}}\n\n//as someone types, newIng updates\nnewIngHandleInput(e) {\n  this.setState({\n    newIng: {key: Date.now(), name: e.target.value}})\n}\n\ndeleteIng = key => {\n  //depends on which screen they are on...\n  const newList = this.state.ingScreen ? this.state.ingList : this.state.ingListExc\n  const filteredList = newList.filter(ing => ing.key !== key)\n  //depending on which page you're on (add or exclude)\n  this.state.ingScreen ? this.setState({ingList: filteredList}) : this.setState({ingListExc : filteredList})\n} //takes list, filters so it only shows ing without those keys, resets state\n\ningString() {\n  const ingList = this.state.ingList.map(item => item.name)\n  const ingListString = ingList.join(\", \")\n  this.setState({ingListString: ingListString})\n}\n\n//======================================================\n// DIET functions\n//======================================================\n\n\n\n//when you choose a diet you move to the search screen\nonClickDiet(e){\n  this.setState({\n    diet: e.target.value.toLowerCase(), chooseDietScreen: false, ingScreen: true})\n}\n\n//if they click omnivore, diet = null (for query string)\nonClickDietNull(){\n  this.setState({chooseDietScreen: false, ingScreen: true})\n}\n\n\n//======================================================\n// SWITCH SEARCH SCREEN functions\n//======================================================\n\n\n\n//if you go back you go to the diet screen\ngoBack(e){ //if on ingExcScreen screen, go back to ing screen. else, go back to diet screen\n  this.state.ingExcScreen ?\n  //back to ing screen from ing exc screen..\n  this.setState({ingScreen: true, ingExcScreen: false}) :\n  //back to diet screen from ing screen\n  this.setState({chooseDietScreen: true, ingScreen: false})\n}\n\n//when you click the next button, we go to the ingExcScreen\nnext(e) { //set state of ing, of ingExcScreen, turn list to string\n  this.setState({ingExcScreen: true, ingScreen: false}, () => {this.ingString()})\n}\n\n\n//======================================================\n// SUBMIT INGREDIENT functions\n//======================================================\n\n//UGH (){ was reseting the app and causing these functions to not run.....\nonClickSearch = () => {\n this.toggleView()\n this.ingListQuery()\n //call toggleView, changes the page on app.js\n}\n\nresultsLoadingHandler() {\n  this.setState({resultsLoading: false})\n}\n\n//=======================================================\n\ningListQuery() {\n  //map list of ingredients (included and excluded)\n  const ingList = this.state.ingList.map(item => item.name)\n  const ingListOrig = [...ingList]\n  this.setState({ingListOrig: ingList})\n  for (var x=0; x < ingListOrig.length; x++) { //search thru ingList for the #items in ingListOrig\n    if (ingList[x].endsWith('s')) { //if the ing ends with \"-s\"...\n      if (ingList[x].endsWith('ies')) { //...ends with \"-ies\"...\n    \t   ingList.push(ingList[x].replace('ies', 'y')); //push singular\n      } else {\n        ingList.push(ingList[x].replace('s', ''))  //push singular\n      }\n    } else if(ingList[x].endsWith('y')) { //if ends with y...\n      ingList.push(ingList[x].replace(\"y\", \"ies\"))   //...push plural\n    } else {\n      ingList.push(ingList[x].concat('s')) //if singular, push plural\n    }\n  }\n  var halflen = ingList.length/2\n  var ingListPaired = [];\n  for (var y=0; y < halflen; y++) {\n    ingListPaired.push({item1: ingList[y], item2: ingList[y + halflen]})\n  }\n  const ingListExc = this.state.ingListExc.map(item => item.name)\n  //make them suitable for the query string\n  const queryList = ingList.join(\",\").replace(\" \", \"+\")\n  const queryExcList = ingListExc.join(\",\").replace(\" \", \"+\")\n  //set state for both query strings\n  this.setState({ingListQuery: queryList, ingListExcQuery: queryExcList, ingList: ingList, ingListPaired: ingListPaired})\n  //separates ingredients with \",+\", required for query by spoonacular\n}\n\nrender() {\n  return(\n    <div>\n      <Navbar />\n      {/*show either search or results*/}\n      <div className=\"container-app\">\n      {!this.state.resultsVisible ?\n        <Search toggleView={this.toggleView}\n        onClickDiet={this.onClickDiet}\n        onClickDietNull={this.onClickDietNull}\n        newIng = {this.state.newIng}\n        ingList = {this.state.ingList}\n        ingListExc = {this.state.ingListExc}\n        ingString = {this.ingString}\n        ingListString = {this.state.ingListString}\n        addIng = {this.addIng}\n        newIngHandleInput = {this.newIngHandleInput}\n        deleteIng = {this.deleteIng}\n        chooseDietScreen = {this.state.chooseDietScreen}\n        ingScreen = {this.state.ingScreen}\n        ingExcScreen = {this.state.ingExcScreen}\n        goBack = {this.goBack}\n        next = {this.next}\n        onClickSearch = {this.onClickSearch}/>\n         :\n        <Results toggleView={this.toggleView}\n        ingList={this.state.ingList}\n        ingListPaired={this.state.ingListPaired}\n        ingListQuery = {this.state.ingListQuery}\n        ingListExcQuery = {this.state.ingListExcQuery}\n        ingListString = {this.state.ingListString}\n        diet = {this.state.diet}\n        resultsLoadingHandler = {this.resultsLoadingHandler}\n        resultsLoading = {this.state.resultsLoading}\n        />\n      }\n      </div>\n      <Footer/>\n    </div>\n  )\n};\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}